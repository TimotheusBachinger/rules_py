load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")

[
    platform(
        name = "{}_{}".format(os, cpu),
        constraint_values = [
            "@platforms//os:" + os,
            "@platforms//cpu:" + cpu,
        ],
    )
    for os in [
        "linux",
        "macos",
    ]
    for cpu in [
        "aarch64",
        "x86_64",
    ]
]

[
    platform_transition_filegroup(
        name = "{}_{}_{}_build".format(bin, os, cpu),
        srcs = ["//py/tools/{}_bin".format(bin)],
        tags = ["manual"],
        target_platform = "{}_{}".format(os, cpu),
    )
    for os in [
        "linux",
        "macos",
    ]
    for cpu in [
        "aarch64",
        "x86_64",
    ]
    for bin in [
        "unpack",
        "venv",
    ]
]

[
    copy_file(
        name = "copy_{}_{}_{}".format(bin, os, cpu),
        src = "{}_{}_{}_build".format(bin, os, cpu),
        out = "{}-{}-{}".format(bin, os, cpu),
        tags = ["manual"],
    )
    for os in [
        "linux",
        "macos",
    ]
    # # FIXME: compiling to macos_x86_64 not working
    for cpu in ["aarch64"]
    for bin in [
        "unpack",
        "venv",
    ]
]

ARTIFACTS = [
    "copy_{}_{}_{}".format(bin, os, cpu)
    for os in [
        "linux",
        "macos",
    ]
    for cpu in ["aarch64"]
    for bin in [
        "unpack",
        "venv",
    ]
]

sh_binary(
    name = "copy_release_artifacts",
    srcs = ["copy_release_artifacts.sh"],
    args = ["$(rlocationpaths {})".format(s) for s in ARTIFACTS],
    data = ARTIFACTS,
    tags = ["manual"],
    deps = ["@bazel_tools//tools/bash/runfiles"],
)
